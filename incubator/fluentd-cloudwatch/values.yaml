image:
  repository: fluent/fluentd-kubernetes-daemonset
  tag: v0.12.33-cloudwatch
## Specify an imagePullPolicy (Required)
## It's recommended to change this to 'Always' if the image tag is 'latest'
## ref: http://kubernetes.io/docs/user-guide/images/#updating-images
  pullPolicy: IfNotPresent

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  limits:
    cpu: 100m
    memory: 200Mi
  requests:
    cpu: 100m
    memory: 200Mi

# hostNetwork: false

## Add tolerations if specified
tolerations:
   - key: node-role.kubernetes.io/master
     operator: Exists
     effect: NoSchedule

annotations: {}

awsRegion: ap-northeast-2
awsRole: nodes.stg.cloudui.com

logGroupName: kubernetes_stg

rbac:
  ## If true, create and use RBAC resources
  create: false

  ## Ignored if rbac.create is true
  serviceAccountName: default

fluentdConfig: |
  <match fluent.**>
    type null
  </match>

  <source>
    type tail
    enable_stat_watcher false
    path /var/log/containers/*.log
    pos_file /var/log/fluentd-containers.log.pos
    time_format %Y-%m-%dT%H:%M:%S.%NZ
    tag kubernetes.*
    format json
    read_from_head true
  </source>

  <source>
    type tail
    enable_stat_watcher false
    path /var/log/containers/service-manager-*.log
    pos_file /var/log/fluentd-containers.log.pos
    time_format %Y-%m-%dT%H:%M:%S.%NZ
    tag service.*
    format json
    read_from_head true
  </source>

  <source>
    type tail
    enable_stat_watcher false
    format kubernetes
    multiline_flush_interval 5s
    path /var/log/cluster-autoscaler.log
    pos_file /var/log/fluentd-cluster-autoscaler.log.pos
    tag kubernetes.*
  </source>

  <filter kubernetes.**>
    type kubernetes_metadata
  </filter>

  <filter kubernetes.**>
     @type record_transformer
     enable_ruby true
     <record>
       pod_name ${record.fetch("kubernetes", Hash.new).fetch("pod_name", "unknown_pod")}
     </record>
  </filter>

  <match kubernetes.**>
    type cloudwatch_logs
    log_group_name "#{ENV['LOG_GROUP_NAME']}"
    log_stream_name_key pod_name
    auto_create_stream true
  </match>

  <match service.**>
    type cloudwatch_logs
    log_group_name "service-manager_stg"
    auto_create_stream true
    use_tag_as_stream true
  </match>
